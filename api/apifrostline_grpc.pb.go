// Copyright 2018 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//*
// The Nakama server RPC protocol for games and apps.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: apifrostline.proto

// The realtime protocol for the template match engine.

package frostlineapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Nakama_GetUserInfo_FullMethodName        = "/frostlineapi.Nakama/GetUserInfo"
	Nakama_GetInventory_FullMethodName       = "/frostlineapi.Nakama/GetInventory"
	Nakama_GetShop_FullMethodName            = "/frostlineapi.Nakama/GetShop"
	Nakama_GetTransactions_FullMethodName    = "/frostlineapi.Nakama/GetTransactions"
	Nakama_GetTransactionInfo_FullMethodName = "/frostlineapi.Nakama/GetTransactionInfo"
)

// NakamaClient is the client API for Nakama service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NakamaClient interface {
	// Get User Account details.
	GetUserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserInfoResponse, error)
	GetInventory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserInventory, error)
	GetShop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetShopData, error)
	// Get purchased transactions
	GetTransactions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTransactionsList, error)
	// get spesific transactions for UserId
	GetTransactionInfo(ctx context.Context, in *TransactionId, opts ...grpc.CallOption) (*GetTransactionResponse, error)
}

type nakamaClient struct {
	cc grpc.ClientConnInterface
}

func NewNakamaClient(cc grpc.ClientConnInterface) NakamaClient {
	return &nakamaClient{cc}
}

func (c *nakamaClient) GetUserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, Nakama_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) GetInventory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserInventory, error) {
	out := new(GetUserInventory)
	err := c.cc.Invoke(ctx, Nakama_GetInventory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) GetShop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetShopData, error) {
	out := new(GetShopData)
	err := c.cc.Invoke(ctx, Nakama_GetShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) GetTransactions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTransactionsList, error) {
	out := new(GetTransactionsList)
	err := c.cc.Invoke(ctx, Nakama_GetTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) GetTransactionInfo(ctx context.Context, in *TransactionId, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, Nakama_GetTransactionInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NakamaServer is the server API for Nakama service.
// All implementations must embed UnimplementedNakamaServer
// for forward compatibility
type NakamaServer interface {
	// Get User Account details.
	GetUserInfo(context.Context, *emptypb.Empty) (*UserInfoResponse, error)
	GetInventory(context.Context, *emptypb.Empty) (*GetUserInventory, error)
	GetShop(context.Context, *emptypb.Empty) (*GetShopData, error)
	// Get purchased transactions
	GetTransactions(context.Context, *emptypb.Empty) (*GetTransactionsList, error)
	// get spesific transactions for UserId
	GetTransactionInfo(context.Context, *TransactionId) (*GetTransactionResponse, error)
	mustEmbedUnimplementedNakamaServer()
}

// UnimplementedNakamaServer must be embedded to have forward compatible implementations.
type UnimplementedNakamaServer struct {
}

func (UnimplementedNakamaServer) GetUserInfo(context.Context, *emptypb.Empty) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedNakamaServer) GetInventory(context.Context, *emptypb.Empty) (*GetUserInventory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedNakamaServer) GetShop(context.Context, *emptypb.Empty) (*GetShopData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShop not implemented")
}
func (UnimplementedNakamaServer) GetTransactions(context.Context, *emptypb.Empty) (*GetTransactionsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedNakamaServer) GetTransactionInfo(context.Context, *TransactionId) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionInfo not implemented")
}
func (UnimplementedNakamaServer) mustEmbedUnimplementedNakamaServer() {}

// UnsafeNakamaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NakamaServer will
// result in compilation errors.
type UnsafeNakamaServer interface {
	mustEmbedUnimplementedNakamaServer()
}

func RegisterNakamaServer(s grpc.ServiceRegistrar, srv NakamaServer) {
	s.RegisterService(&Nakama_ServiceDesc, srv)
}

func _Nakama_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nakama_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).GetUserInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nakama_GetInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).GetInventory(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_GetShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).GetShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nakama_GetShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).GetShop(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nakama_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).GetTransactions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_GetTransactionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).GetTransactionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nakama_GetTransactionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).GetTransactionInfo(ctx, req.(*TransactionId))
	}
	return interceptor(ctx, in, info, handler)
}

// Nakama_ServiceDesc is the grpc.ServiceDesc for Nakama service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nakama_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "frostlineapi.Nakama",
	HandlerType: (*NakamaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _Nakama_GetUserInfo_Handler,
		},
		{
			MethodName: "GetInventory",
			Handler:    _Nakama_GetInventory_Handler,
		},
		{
			MethodName: "GetShop",
			Handler:    _Nakama_GetShop_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _Nakama_GetTransactions_Handler,
		},
		{
			MethodName: "GetTransactionInfo",
			Handler:    _Nakama_GetTransactionInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apifrostline.proto",
}
